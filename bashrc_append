# detect WSL
if grep --quiet Microsoft /proc/version; then

  # fix bash colors for dark background
  LS_COLORS='rs=0:di=1;35:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
  export LS_COLORS

fi

# from https://gist.github.com/eliotsykes/47516b877f5a4f7cd52f#gistcomment-2835293
# GIT bash integration
if [[ -e /usr/lib/git-core/git-sh-prompt ]]; then

  source /usr/lib/git-core/git-sh-prompt

  export GIT_PS1_SHOWCOLORHINTS=true
  export GIT_PS1_SHOWDIRTYSTATE=true
  export GIT_PS1_SHOWUNTRACKEDFILES=true
  export GIT_PS1_SHOWUPSTREAM="auto"
  # PROMPT_COMMAND='__git_ps1 "\u@\h:\w" "\\\$ "'

  # use existing PS1 settings
  PROMPT_COMMAND=$(sed -r 's|^(.+)(\\\$\s*)$|__git_ps1 "\1" "\2"|' <<< $PS1)
fi

# Note: Bash on Windows does not currently apply umask properly.
if [ "$(umask)" = "0000" ]; then
  umask 0022
fi

if [ -f  ~/.local/bin/terraform ]; then
  # autocomplete for terraform
  complete -C ~/.local/bin/terraform terraform
fi

# autocomplete for aws cli
if [ -f ~/.local/bin/aws_completer ]; then
  complete -C ~/.local/bin/aws_completer aws
elif [ -f /usr/local/bin/aws_completer ]; then
  complete -C /usr/local/bin/aws_completer aws
fi

if [ -f  ~/.local/bin/awless ]; then
    source <(~/.local/bin/awless completion bash)
fi

## ssh-agent ##
if [ ! -S "${SSH_AUTH_SOCK}" ]; then
  # Env var not set or doesn't point to a socket file. Point it to the known
  # socket path.
  export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
  # If known path points to a socket connected to a running agent, no new agent
  # will be launched.
fi

ssh-add -l &> /dev/null ; ec=$?  # grab the exit code into a variable so that it can
                                 # be reused later, without the fear of being overwritten
case $ec in
  0) ;; # already running, nothing to do.
  1) ;; # no identities, but running
  2) 
    # relaunch agent. and link the known socket path to this new socket.
    eval $(ssh-agent -s)
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
    # no need to reset SSH_AUTH_SOCK env var. but doing it anyway for
    # consistency.
    export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
    ;; 
  *) ;; # ignore other exit codes, don't know what they are
esac

### PATH ###

path_append() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi
}

path_prepend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi
}

# set PATH so it includes user's private bin if it exists
path_prepend "$HOME/bin"
path_prepend "$HOME/.local/bin"
